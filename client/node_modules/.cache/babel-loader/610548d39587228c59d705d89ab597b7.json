{"ast":null,"code":"var _jsxFileName = \"/home/ashiqa/Desktop/docoverflow/client/src/Comment.js\",\n    _s = $RefreshSig$();\n\nimport Post from \"./Post\";\nimport CommentForm from \"./CommentForm\";\nimport RootCommentContext from \"./RootCommentContext\";\nimport Comments from \"./Comments\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Comment(props) {\n  _s();\n\n  //props contains the id of the comment that has to be displayed to the user\n  const [comment, setComment] = useState({});\n  const [comments, setComments] = useState([]);\n  const [commentsTotals, setCommentsTotals] = useState(null);\n  const [userVotes, setUserVotes] = useState(null); //this continuously gets information from the backend regarding any updates on the post comments\n\n  function refreshComments() {\n    axios.get('http://localhost:4000/comments/root/' + props.id).then(response => {\n      setComments(response.data);\n    });\n  } //this continuously gets information from the backend regarding any updates on the votes for particular comments\n\n\n  function refreshVotes() {\n    const commentsIds = [comment._id, ...comments.map(c => c._id)];\n    axios.post('http://localhost:4000/votes', {\n      commentsIds\n    }, {\n      withCredentials: true\n    }).then(response => {\n      setCommentsTotals(response.data.commentsTotals);\n      setUserVotes(response.data.userVotes);\n    });\n  } //the new updates are then stores into props.comment as this is called whenever we make a new comment\n\n\n  useEffect(() => {\n    //\n    if (props.comment) {\n      setComment(props.comment);\n    } else {\n      //\n      axios.get('http://localhost:4000/comments/' + props.id).then(response => {\n        setComment(response.data);\n      });\n    }\n\n    refreshComments();\n  }, [props.id, props.comment]); //if we get a new comment, refresh the count of votes for the post to add the new one\n\n  useEffect(() => {\n    refreshVotes();\n  }, [comments.length]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [comment && /*#__PURE__*/_jsxDEV(Post, { ...comment,\n      open: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), !!comment && !!comment._id && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"border-docflow_border my-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n        onSubmit: () => refreshComments(),\n        rootId: comment._id,\n        parentId: comment._id,\n        showAuthor: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"border-reddiit_border my-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RootCommentContext.Provider, {\n        value: {\n          refreshComments,\n          refreshVotes,\n          commentsTotals,\n          userVotes\n        },\n        children: /*#__PURE__*/_jsxDEV(Comments, {\n          parentId: comment._id,\n          rootId: comment._id,\n          comments: comments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Comment, \"y/tazznLr7CKvKEpoqYxPkb8txQ=\");\n\n_c = Comment;\nexport default Comment;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"sources":["/home/ashiqa/Desktop/docoverflow/client/src/Comment.js"],"names":["Post","CommentForm","RootCommentContext","Comments","useEffect","useState","axios","Comment","props","comment","setComment","comments","setComments","commentsTotals","setCommentsTotals","userVotes","setUserVotes","refreshComments","get","id","then","response","data","refreshVotes","commentsIds","_id","map","c","post","withCredentials","length"],"mappings":"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","sourcesContent":["import Post from \"./Post\";\nimport CommentForm from \"./CommentForm\";\nimport RootCommentContext from \"./RootCommentContext\";\nimport Comments from \"./Comments\";\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\n\nfunction Comment(props) {\n\n  //props contains the id of the comment that has to be displayed to the user\n\n  const [comment,setComment] = useState({});\n  const [comments,setComments] = useState([]);\n  const [commentsTotals, setCommentsTotals] = useState(null);\n  const [userVotes, setUserVotes] = useState(null);\n\n  //this continuously gets information from the backend regarding any updates on the post comments\n  function refreshComments() {\n    axios.get('http://localhost:4000/comments/root/'+props.id)\n      .then(response => {\n        setComments(response.data);\n      });\n  }\n\n  //this continuously gets information from the backend regarding any updates on the votes for particular comments\n  function refreshVotes() {\n    const commentsIds = [comment._id, ...comments.map(c => c._id) ];\n    axios.post('http://localhost:4000/votes', {commentsIds}, {withCredentials:true})\n      .then(response => {\n        setCommentsTotals(response.data.commentsTotals);\n        setUserVotes(response.data.userVotes);\n      })\n  }\n\n  //the new updates are then stores into props.comment as this is called whenever we make a new comment\n  useEffect(() => {\n    \n    //\n    if (props.comment) {\n      setComment(props.comment);\n    } else {\n      //\n      axios.get('http://localhost:4000/comments/'+props.id)\n        .then(response => {\n          setComment(response.data);\n        });\n    }\n    refreshComments();\n  }, [props.id, props.comment]);\n\n  //if we get a new comment, refresh the count of votes for the post to add the new one\n  useEffect(() => {\n    refreshVotes();\n  }, [comments.length]);\n\n  return (\n    <>\n    {/* if we have already commented, we use the Post component to display the entire post with all the comments on the web page */}\n      {comment && (\n        <Post {...comment} open={true} />\n      )}\n\n      {/* In case we havent commented yet, this gives us an option to do so */}\n      {!!comment && !!comment._id && (\n        <>\n          <hr className=\"border-docflow_border my-4\"/>\n\n          {/* CommentForm compoennt is used to post new comments on a post */}\n          <CommentForm onSubmit={() => refreshComments()}\n                       rootId={comment._id} parentId={comment._id} showAuthor={true} />\n          <hr className=\"border-reddiit_border my-4\"/>\n          \n          {/* This provides the necessary information on the original post we were looking at */}\n          <RootCommentContext.Provider value={{refreshComments,refreshVotes,commentsTotals,userVotes}}>\n            \n            {/* The info on the post received before is used to display the post here using Comments component */}\n            <Comments\n              parentId={comment._id}\n              rootId={comment._id}\n              comments={comments} />\n          </RootCommentContext.Provider>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Comment;"]},"metadata":{},"sourceType":"module"}